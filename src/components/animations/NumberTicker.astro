---
const { value = 100, initial = 0, duration = 6000, class: className } = Astro.props;
---

<span
  class:list={[
    "inline-block text-violet dark:text-violet tracking-normal number-ticker",
    className
  ]}
  data-value={value}
  data-initial={initial}
  data-duration={duration}
>
  {initial}
</span>

<script>
  function animateValue(obj, start, end, duration) {
    let startTimestamp = null;
    const step = (timestamp) => {
      if (!startTimestamp) startTimestamp = timestamp;
      const progress = Math.min((timestamp - startTimestamp) / duration, 1);
      const current = Math.floor(progress * (end - start) + start);
      obj.innerHTML = current;
      if (progress < 1) {
        window.requestAnimationFrame(step);
      }
    };
    window.requestAnimationFrame(step);
  }

  function handleIntersection(entries, observer) {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const el = entry.target;
        const value = parseInt(el.dataset.value);
        const initial = parseInt(el.dataset.initial);
        const duration = parseInt(el.dataset.duration);
        animateValue(el, initial, value, duration);
        observer.unobserve(el);
      }
    });
  }

  document.addEventListener('DOMContentLoaded', () => {
    const observer = new IntersectionObserver(handleIntersection, {
      root: null,
      rootMargin: '0px',
      threshold: 0.1
    });

    const elements = document.querySelectorAll('.number-ticker');
    elements.forEach(el => {
      observer.observe(el);
    });
  });
</script>